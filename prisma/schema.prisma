// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  username     String    @unique
  passwordHash String
  name         String?
  avatar       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  goals        Goal[]
  journalEntries JournalEntry[]
  healthMetrics HealthMetric[]
  aiConversations AIConversation[]
  musicCompositions MusicComposition[]
  searchHistory SearchHistory[]
  analyticsEvents AnalyticsEvent[]
  mentalHealthAssessments MentalHealthAssessment[]
  moodEntries MoodEntry[]
  savedStrategies SavedStrategy[]

  @@map("users")
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  category    String   // personal, professional, health, learning, etc.
  status      String   @default("active") // active, completed, paused, cancelled
  priority    String   @default("medium") // low, medium, high
  targetDate  DateTime?
  progress    Int      @default(0) // 0-100
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones  Milestone[]

  @@map("goals")
}

model Milestone {
  id          String   @id @default(cuid())
  goalId      String
  title       String
  description String?
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

model JournalEntry {
  id          String   @id @default(cuid())
  userId      String
  title       String?
  content     String
  mood        String?  // happy, sad, anxious, excited, etc.
  tags        String[] // Array of tags
  isPrivate   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiInsights  AIInsight[]

  @@map("journal_entries")
}

model AIInsight {
  id            String   @id @default(cuid())
  journalEntryId String
  insight       String
  type          String   // emotional, pattern, suggestion, etc.
  confidence    Float    @default(0.0) // 0.0-1.0
  createdAt     DateTime @default(now())

  // Relations
  journalEntry  JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)

  @@map("ai_insights")
}

model HealthMetric {
  id          String   @id @default(cuid())
  userId      String
  type        String   // mood, sleep, activity, weight, etc.
  value       Float
  unit        String?  // kg, hours, steps, etc.
  notes       String?
  recordedAt  DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("health_metrics")
}

model AIConversation {
  id          String   @id @default(cuid())
  userId      String
  title       String?
  context     String?  // conversation context or topic
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages    AIMessage[]

  @@map("ai_conversations")
}

model AIMessage {
  id              String   @id @default(cuid())
  conversationId  String
  role            String   // user, assistant, system
  content         String
  timestamp       DateTime @default(now())

  // Relations
  conversation    AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("ai_messages")
}

model MusicComposition {
  id          String   @id @default(cuid())
  userId      String
  title       String
  prompt      String
  composition Json     // Music composition data
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("music_compositions")
}

model SearchHistory {
  id          String   @id @default(cuid())
  userId      String
  query       String
  results     Int      @default(0)
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("search_history")
}

model AnalyticsEvent {
  id          String   @id @default(cuid())
  userId      String?
  event       String
  category    String?
  data        Json?
  timestamp   DateTime @default(now())

  // Relations
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("analytics_events")
}

model KnowledgeEntry {
  id          String   @id @default(cuid())
  title       String
  content     String
  category    String
  tags        String[]
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("knowledge_entries")
}

// --- MENTAL HEALTH MODULE ---

// Model for standardized mental health assessments (e.g., PHQ-9, GAD-7)
model MentalHealthAssessment {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String     // e.g., "PHQ-9", "GAD-7"
  scores    Json       // Stores the answers and final score
  summary   String?    // AI-generated summary of the results
  createdAt DateTime   @default(now())

  @@map("mental_health_assessments")
}

// Model to track daily mood and associated factors
model MoodEntry {
  id        String     @id @default(cuid())
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  moodScore Int        // A score from 1 to 10
  notes     String?    // User's journal entry about their mood
  tags      String[]   // e.g., "work", "family", "stress"
  aiInsight String?    // AI-generated insight based on the entry
  createdAt DateTime   @default(now()) @map("created_at")

  @@map("mood_entries")
}

// A library of coping strategies and mental wellness resources
model CopingStrategy {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  category    String   // e.g., "Anxiety", "Stress", "Depression"
  type        String   // e.g., "Breathing Exercise", "Mindfulness", "Grounding Technique"
  content     Json     // Can store steps for an exercise, video links, etc.
  savedStrategies SavedStrategy[]

  @@map("coping_strategies")
}

// A user's personalized collection of helpful strategies
model SavedStrategy {
  id         String         @id @default(cuid())
  userId     String
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategyId String
  strategy   CopingStrategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  savedAt    DateTime       @default(now())

  @@unique([userId, strategyId])
  @@map("saved_strategies")
}
